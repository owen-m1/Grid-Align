(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["GridAlign"] = factory();
	else
		root["GridAlign"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./gridAlign.js":
/*!**********************!*\
  !*** ./gridAlign.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


let options = {
  animation: 1000,
  randomizeRows: true
};

function alignGrid(el, userOptions) {
  userOptions && mergeObj(options, userOptions);
  let grid = [[]],
      elRect = el.getBoundingClientRect(),
      lengthPropety = 'width',
      oppLengthProperty = 'height',
      children = Array.from(el.children),
      elLength = elRect[lengthPropety];
  let animateRectsBefore = children.map(a => {
    return {
      rect: a.getBoundingClientRect(),
      el: a
    };
  });
  let rows = Math.floor(children[children.length - 1].getBoundingClientRect().bottom / children[0].getBoundingClientRect()[oppLengthProperty]); // Make new 2D array

  let newGrid = [];

  for (let i = 0; i < rows; i++) {
    newGrid.push([]);
  }

  let pool = children.map((el, i) => {
    return {
      rect: el.getBoundingClientRect(),
      el,
      originalIndex: i
    };
  });

  for (let row = 0; row < rows; row++) {
    let widthLeft = elLength;

    while (true) {
      let currentLastInRow = 0;

      for (let i in newGrid[row]) {
        currentLastInRow += newGrid[row][i].rect.width;
      }

      let differencesSorted = pool.sort(function (a, b) {
        if (!a || !b) return;
        let aPotentialEnd = currentLastInRow + a.el.getBoundingClientRect()[lengthPropety],
            bPotentialEnd = currentLastInRow + b.el.getBoundingClientRect()[lengthPropety];
        a.difference = elLength - aPotentialEnd;
        b.difference = elLength - bPotentialEnd;
        return a.difference - b.difference;
      });
      let chosenEl = differencesSorted[0];
      if (!chosenEl) break;
      let currDiff = chosenEl.difference;
      let chosenIndex = 0;

      while (currDiff < 0) {
        chosenIndex++;

        if (chosenIndex > differencesSorted.length - 1) {
          break;
        }

        chosenEl = differencesSorted[chosenIndex];
        currDiff = chosenEl.difference;
      } // If overflowing, new row


      if (currDiff < 0) {
        break;
      }

      pool.splice(pool.indexOf(chosenEl), 1);
      widthLeft -= chosenEl.el.getBoundingClientRect()[lengthPropety];
      newGrid[row].push(chosenEl);
    }

    newGrid[row] = newGrid[row].sort((a, b) => a.originalIndex - b.originalIndex);
  }

  if (options.randomizeRows) {
    let rowsExcludingLast = newGrid.slice(0, newGrid.length - 1);
    newGrid = [newGrid[newGrid.length - 1]];
    newGrid = [...shuffle(rowsExcludingLast), ...newGrid];
  }

  while (el.hasChildNodes()) {
    el.removeChild(el.lastChild);
  } // Reconstruct


  for (let i in newGrid) {
    for (let n in newGrid[i]) {
      el.appendChild(newGrid[i][n].el);
    }
  } // Animation


  for (let i in newGrid) {
    for (let n in newGrid[i]) {
      animate(animateRectsBefore.find(a => a.el === newGrid[i][n].el).rect, newGrid[i][n].el);
    }
  }
}

function mergeObj(to, from) {
  for (let prop in from) {
    to[prop] = from[prop];
  }
}

function _css(el, prop, val) {
  let style = el && el.style;

  if (style) {
    if (val === void 0) {
      if (document.defaultView && document.defaultView.getComputedStyle) {
        val = document.defaultView.getComputedStyle(el, '');
      } else if (el.currentStyle) {
        val = el.currentStyle;
      }

      return prop === void 0 ? val : val[prop];
    } else {
      if (!(prop in style) && prop.indexOf('webkit') === -1) {
        prop = '-webkit-' + prop;
      }

      style[prop] = val + (typeof val === 'string' ? '' : 'px');
    }
  }
}

let repaint;

function animate(prevRect, target) {
  let ms = options.animation;
  if (target.animated) return;

  if (ms) {
    let currentRect = target.getBoundingClientRect();

    if (prevRect.nodeType === 1) {
      prevRect = prevRect.getBoundingClientRect();
    } // Check if actually moving position


    if (prevRect.left + prevRect.width / 2 !== currentRect.left + currentRect.width / 2 || prevRect.top + prevRect.height / 2 !== currentRect.top + currentRect.height / 2) {
      _css(target, 'transition', 'none');

      _css(target, 'transform', 'translate(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px)');

      repaint = target.offsetWidth;

      _css(target, 'transition', 'transform ' + ms + 'ms');

      _css(target, 'transform', 'translate(0,0)');
    }

    typeof target.animated === 'number' && clearTimeout(target.animated);
    target.animated = setTimeout(function () {
      _css(target, 'transition', '');

      _css(target, 'transform', '');

      target.animated = false;
    }, ms);
  }
}

function shuffle(array) {
  let counter = array.length - 1; // While there are elements in the array

  while (counter > 0) {
    // Pick a random index
    let index = Math.floor(Math.random() * counter); // Decrease counter by 1

    counter--; // And swap the last element with it

    let temp = array[counter];
    array[counter] = array[index];
    array[index] = temp;
  }

  return array;
}

module.exports = alignGrid;

/***/ }),

/***/ 0:
/*!****************************!*\
  !*** multi ./gridAlign.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./gridAlign.js */"./gridAlign.js");


/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,